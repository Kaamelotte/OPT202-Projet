function [alpha, nbSimul] = rl(simul,x, nbSimul, lme, dir, dphi, phi, omega, options)	n = length(x);	i = 0; #nb d'itérations de la RL	alpha = 1	pente = omega * dot(dphi,dir); #omega.alpha_k.phi'(z_k).p_k		if options.verb == 2 ##=== Impression ===##		fprintf('phi %.5e, pente %.5e\n\n',phi,pente);		fprintf("Recherche linéaire d'Armijo: |d| = %.2e\n",norm(dir,inf))		fprintf('%10s %15s %13s\n','alpha','phip-phi','DF(phi)');	end ##================## 	##=== Boucle sur i ============================================================##	while true		xp = x + alpha*dir(1:n); 		#lp = 		lp = (1-alpha)*lme + alpha*dir(n+1:length(dir));							[~,cep,cip,gp,aep,aip,~,~] = simul(4,xp,lp, []);		nbSimul += 1;		Fp = [gp; cep];		phip = 0.5 * Fp' * Fp; #0.5*||F(z_k+alpha_k.p_k)||^2		if options.verb == 2			fprintf('%12.4e %14.5e %14.5e\n',alpha,phip-phi,(phip-phi)/alpha);		end			grdlp = gp + aep' * lp;		##=== Test d'optimalité sur phi =======================================##		if phip <= phi + alpha*pente			if options.verb == 1				fprintf('%10.4e %10.4e %10.4e %10.4e %10.4e %10.4e %10.4e\n',...						norm(grdlp),norm(cep),norm(xp),norm(lp),alpha,phi,Q);			elseif options.verb == 2				fprintf('|gl| = %.3e, |ce| = %.3e\n',norm(grdlp,inf),norm(cep,inf));			end			break; #Sortie de Recherche linéaire		end##============================================================##				alpha = alpha/2;		i = i+1;		##===Test du nombre d'itérations déjà effectuées==========================##		if(i > 10)			info.status = 3; #PB dans la RL			if options.verb == 2				fprintf('|gl| = %.3e, |ce| = %.3e\n',norm(grdlp,inf),norm(cep,inf));			end			break; 		end##==============================================================##	end##=== Fin boucle i ============================================================##	returnend;